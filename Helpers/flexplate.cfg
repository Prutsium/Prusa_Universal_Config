#####################################################################
#  Preperation 
#####################################################################
## copy this file in the same directory as your printer.cfg
## add 
##    [include flexplate.cfg]
## to your printer.cfg
##
## A [save_variables] block is needed since a printer save variable needs to be used to have it available after power up.
## You can skip this if you already have an [save_variables] config block
## e.g: 
##    [save_variables]
##    filename: /home/pi/klipper_config/.variables.stb
## I like to hide that file as there is nothing in that should be modified by the user.
## Do a klipper restart after adding the stuff above
##
## After klipper is back type 
##     _INIT_PLATE_ARRAY
## in the console to initial the needed variables
## Thats all you need to do for the initial setup
##
#####################################################################
#  Normal usage Console
#####################################################################
## Init Array                : INIT_PLATE_ARRAY (one time action)
## List all plates           : LIST_PLATES
## Change act Plate          : SET_PLATE INDEX=0 (any index number)
## Add New Plate             : ADD_NEW_PLATE
## Remove active Plate       : REMOVE_PLATE
## Change offset of act Plate: CHANGE_PLATE_OFFSET OFFSET=0.001 (any new offset) 
## Change name of act Plate  : CHANGE_PLATE_NAME Name=test (any new name) 
##
#####################################################################
#  Normal usage LCD menu
#####################################################################
## you can do all what is listed above exluding list plates (not needed)
## change name is not implemented as I do not have a clue how to do the naming in the lcd
## The visibility of Menu Items depends on the printer state
##
#####################################################################
#  Get offset_z and name for own usage
#####################################################################
## use:  
##   {% set plate_offset_z = printer.save_variables.variables.plate_array[printer.save_variables.variables.plate_index|int][1] %}
##   {% set plate_name = printer.save_variables.variables.plate_array[printer.save_variables.variables.plate_index|int][0] %}
## to get the needed parameter of the active plate
##
#####################################################################
#  Macros
#####################################################################
[gcode_macro _USER_VARIABLE]
variable_auto_z_offset: 'flexplate'        ; none/flexplate/z_calib depends what is found in cfg
gcode:

## Initial plate offset at klipper start
[delayed_gcode DELAY_INIT_PLATE]
initial_duration: 2
gcode:
  {% if not printer.save_variables.variables.plate_array %}
    {action_respond_info("FLEXPLATE: No Plate Array defined, please run  _INIT_PLATE_ARRAY")}
  {% else %}
    {% if printer['gcode_macro _USER_VARIABLE'].auto_z_offset|lower == 'flexplate' %}
      _DISPLAY_PLATE TEXT='Init'
      _SET_PLATE_OFFSET MOVE='false'
    {% endif %}
  {% endif %}
  
# execute gcode offset of the actual plate
# !!! old offsets will ger zero'ed !!!
# usage: _SET_PLATE_OFFSET MOVE='false'
[gcode_macro _SET_PLATE_OFFSET]
description: Helper: Apply the z-offset of the active flexplate
gcode:
  # set default parameter value
  {% set move = params.MOVE|default('true') %}
  {% if not printer.save_variables.variables.plate_array %}
    {action_respond_info("FLEXPLATE:No Plate Array defined, please run _INIT_PLATE_ARRAY")}
  {% else %}
    {% if printer['gcode_macro _USER_VARIABLE'].auto_z_offset|lower == 'flexplate' %}
      {% set plates = printer.save_variables.variables.plate_array %}
      {% set index = printer.save_variables.variables.plate_index|int %}
      {% set plate_offset_z = plates[index][1] %}
      SET_GCODE_OFFSET Z=0
      {% if move == 'true' %}
        SET_GCODE_OFFSET Z_ADJUST={plate_offset_z|float} MOVE=1
      {% else %}
        SET_GCODE_OFFSET Z_ADJUST={plate_offset_z|float}
      {% endif %}
    {% endif %}
  {% endif %}
  
# shows active plate and offset in console and display
# usage: _DISPLAY_PLATE TEXT='Set'
[gcode_macro _DISPLAY_PLATE]
description: Helper: Print active flexplate values
gcode:
  # set default parameter value
  {% set text = params.TEXT|default('Used') %}
  {% if not printer.save_variables.variables.plate_array %}
    {action_respond_info("FLEXPLATE: No Plate Array defined, please run _INIT_PLATE_ARRAY")}
  {% else %}
    {% set plates = printer.save_variables.variables.plate_array %}
    {% set index = printer.save_variables.variables.plate_index|int %}
    {% set plate_offset_z = plates[index][1] %}
    {% set plate_name = plates[index][0] %}
    M117 Plate: {plate_name}
    {action_respond_info("%s Plate: %s --> set z_offset: %01.3fmm" % (text, plate_name|string,plate_offset_z|float))}
    UPDATE_DELAYED_GCODE ID=_CLEAR_DISPLAY DURATION=10
  {% endif %}

# initial array this is only working as long the variables are not existing
# this is done to help users at the install
# usage: _INIT_PLATE_ARRAY
[gcode_macro _INIT_PLATE_ARRAY]
description: Initialize flexplate array
gcode:
  {% if not printer.save_variables.variables.plate_array %}
    {% set array = namespace(output = '') %}
    # klipper can not store arrays elements so we need to do a string manipulation
    # add first element
    {% set element = "[('First', 0.0)]" %}
    {% set array.output = array.output +  element %}
    SAVE_VARIABLE VARIABLE=plate_array VALUE="{array.output}"
    SAVE_VARIABLE VARIABLE=plate_index VALUE=0
  {% else %}
    {action_respond_info("FLEXPLATE: Plate Array alread exists. ABORDED")}
  {% endif %}

# list all plates
# usage: LIST_PLATES
[gcode_macro LIST_PLATES]
description: Print all flexplates
gcode:
  {% if not printer.save_variables.variables.plate_array %}
    {action_respond_info("FLEXPLATE: No Plate Array defined, please run _INIT_PLATE_ARRAY")}
  {% else %}
    {% set array = namespace(output = '') %}
    {% set plates = printer.save_variables.variables.plate_array %}
    {% set elem_count = plates|length %}
    {% set act_index = printer.save_variables.variables.plate_index|int %}
    {% set element = "Defined Plates:" %}
    {% set array.output = array.output + element + "\n"%}
    {% for index in range(elem_count) %}
      {% set element = "%-10s -> Offset: %01.3fmm -> Index: %-2d" % (plates[index][0], plates[index][1], index) %}
      {% set array.output = array.output + element + "\n"%}
    {% endfor %}
    {% set element = "Active Plate: %s" % (plates[act_index][0]) %}
    {% set array.output = array.output + "\n" + element + "\n"%}
    {action_respond_info("%s" % (array.output))}
  {% endif %}

# set active plate by index
# usage: SET_PLATE INDEX=0
[gcode_macro SET_PLATE]
description: Set an flexplate
gcode:
  # set default parameter value
  {% set index = params.INDEX|default(0)|int %}
  {% if not printer.save_variables.variables.plate_array %}
    {action_respond_info("FLEXPLATE: No Plate Array defined, please run _INIT_PLATE_ARRAY")}
  {% else %}
    {% set plates = printer.save_variables.variables.plate_array %}
    {% set elem_count = plates|length %}
    # check INDEX in range
    {% if (index|int >= 0) and (index|int <= (elem_count-1)) %}
      SAVE_VARIABLE VARIABLE=plate_index VALUE={index|int}
      _DISPLAY_PLATE TEXT='Set'
      # check if printer is homed
      {% if "xyz" in printer.toolhead.homed_axes %}
        _SET_PLATE_OFFSET
      {% else %}
        {action_respond_info("Offset will be appied with next move")}
        _SET_PLATE_OFFSET MOVE='false'
      {% endif %}
    {% else %}
      {action_respond_info("FLEXPLATE: Index out of Range. ABORDED")}
    {% endif %}
  {% endif %}

# add a new plate to the array
# usage: ADD_NEW_PLATE
[gcode_macro ADD_NEW_PLATE]
description: Add a new flexplate to the array
gcode:
  {% if not printer.save_variables.variables.plate_array %}
    {action_respond_info("FLEXPLATE: No Plate Array defined, please run _INIT_PLATE_ARRAY")}
  {% else %}
    {% set array = namespace(output = '') %}
    {% set plates = printer.save_variables.variables.plate_array %}
    {% set elem_count = plates|length %}
    # klipper can not store arrays elements so we need to do a string manipulation 
    {% for index in range(elem_count) %}
      {% set element = "('%s', %s), " % (plates[index][0], plates[index][1]) %}
      {% set array.output = array.output + element %}
    {% endfor %}
    # add new element
    {% set element = "('New', 0.0)" %}
    {% set array.output = array.output + element %}
    # add array boarders
    {% set array.output = "[%s]"% (array.output) %}
    SAVE_VARIABLE VARIABLE=plate_array VALUE="{array.output}"
  {% endif %}
  
# remove the active plate from array
# !!! Active Plate will change to first plate
# usage: REMOVE_PLATE
[gcode_macro REMOVE_PLATE]
description: Remove the active flexplate from array 
gcode:
  {% if not printer.save_variables.variables.plate_array %}
    {action_respond_info("FLEXPLATE: No Plate Array defined, please run _INIT_PLATE_ARRAY")}
  {% else %}
    {% set array = namespace(output = '') %}
    {% set plates = printer.save_variables.variables.plate_array %}
    {% set act_index = printer.save_variables.variables.plate_index|int %}
    # check if last aray element needs to be deleted
    {% if act_index == (plates|length - 1) %}
      # last element will be deleted    
      {% set elem_count = plates|length - 1 %}
    {% else %}
      {% set elem_count = plates|length %}
    {% endif %}
    # check if array contains only one element
    {% if elem_count <= 1%}
      {action_respond_info("FLEXPLATE: Last Plate can not be deleted. ABORDED")}
    {% else %}
      # klipper can not store arrays elements so we need to do a string manipulation 
      {% for index in range(elem_count) %}
        {% if index != act_index %}
          {% set element = "('%s', %s)" % (plates[index][0], plates[index][1]) %}
          {% set array.output = array.output + element %}
          # add seperator where needed
          {% if index != (elem_count-1) %}
            {% set element = ", " %}
            {% set array.output = array.output + element %}
          {% endif %}
        {% endif %}
      {% endfor %}
      # add array boarders
      {% set array.output = "[%s]"% (array.output) %}
      SAVE_VARIABLE VARIABLE=plate_array VALUE="{array.output}"
      SAVE_VARIABLE VARIABLE=plate_index VALUE=0
      _DISPLAY_PLATE TEXT='Set'
      # check if printer is homed
      {% if "xyz" in printer.toolhead.homed_axes %}
        _SET_PLATE_OFFSET
      {% else %}
        {action_respond_info("Offset will be appied with next move")}
        _SET_PLATE_OFFSET MOVE='false'
      {% endif %}
    {% endif %}
  {% endif %}

# change offset of the actual selected plate
# usage: CHANGE_PLATE_OFFSET OFFSET=0.001
[gcode_macro CHANGE_PLATE_OFFSET]
description: Change z-offset of active flexplate
gcode:
  # set default parameter value
  {% set offset = params.OFFSET|default(0.0)|float %}
  {% if not printer.save_variables.variables.plate_array %}
    {action_respond_info("FLEXPLATE: No Plate Array defined, please run _INIT_PLATE_ARRAY")}
  {% else %}
    {% set array = namespace(output = '') %}
    {% set plates = printer.save_variables.variables.plate_array %}
    {% set elem_count = plates|length %}
    {% set act_index = printer.save_variables.variables.plate_index|int %}
    # klipper can not store arrays elements so we need to do a string manipulation 
    {% for index in range(elem_count) %}
      # chech for element to change
      {% if index == act_index %}
        {% set element = "('%s', %s)" % (plates[index][0], offset) %}
      {% else %}
        {% set element = "('%s', %s)" % (plates[index][0], plates[index][1]) %}
      {% endif %}
      {% set array.output = array.output + element %}
      # add seperator where needed
      {% if index != (elem_count-1) %}
        {% set element = ", " %}
        {% set array.output = array.output + element %}
      {% endif %}
    {% endfor %}
    # add array boarders
    {% set array.output = "[%s]"% (array.output) %}
    SAVE_VARIABLE VARIABLE=plate_array VALUE="{array.output}"
    _DISPLAY_PLATE TEXT='Set'
    # check if printer is homed
    {% if "xyz" in printer.toolhead.homed_axes %}
      _SET_PLATE_OFFSET
    {% else %}
      {action_respond_info("Offset will be appied with next move")}
      _SET_PLATE_OFFSET MOVE='false'
    {% endif %}
  {% endif %}
  
# change name of the actual selected plate
# usage: CHANGE_PLATE_NAME Name=test
[gcode_macro CHANGE_PLATE_NAME]
description: Change name of active flexplate
gcode:
  # set default parameter value
  {% set name = params.NAME|default('New') %}
  {% if not printer.save_variables.variables.plate_array %}
    {action_respond_info("FLEXPLATE: No Plate Array defined, please run _INIT_PLATE_ARRAY")}
  {% else %}
    {% set array = namespace(output = '') %}
    {% set plates = printer.save_variables.variables.plate_array %}
    {% set elem_count = plates|length %}
    {% set act_index = printer.save_variables.variables.plate_index|int %}
    # klipper can not store arrays elements so we need to do a string manipulation
    {% for index in range(elem_count) %}
      # chech for element to change
      {% if index == act_index %}
        {% set element = "('%s', %s)" % (name, plates[index][1]) %}
      {% else %}
        {% set element = "('%s', %s)" % (plates[index][0], plates[index][1]) %}
      {% endif %}
      {% set array.output = array.output + element %}
      # add seperator where needed
      {% if index != (elem_count-1) %}
        {% set element = ", " %}
        {% set array.output = array.output + element %}
      {% endif %}
    {% endfor %}
    # add array boarders
    {% set array.output = "[%s]"% (array.output) %}
    SAVE_VARIABLE VARIABLE=plate_array VALUE="{array.output}"
  {% endif %}
  
#####################################################################
#  Display Menu
#####################################################################
## FlexPlate selection
[menu __main __flexplate]
type: list
name: Flexplate
enable: {not printer.idle_timeout.state == "Printing"}
index: 1

[menu __main __flexplate __act]
type: command
name:  Act: {printer.save_variables.variables.plate_array[printer.save_variables.variables.plate_index|int][0]} 
enable: {'plate_array' in printer.save_variables.variables}

[menu __main __flexplate __set]
type: input
name:  Set: {printer.save_variables.variables.plate_array[menu.input|int][0]}
enable: {'plate_array' in printer.save_variables.variables}
input: {printer.save_variables.variables.plate_index|int}
input_min: 0
input_max: {printer.save_variables.variables.plate_array|length - 1}
gcode:
  {%- if menu.event == 'long_click' -%}
    SET_PLATE INDEX={'%d' % menu.input|int}
  {%- endif -%}

[menu __main __flexplate __setup]
type: list
name: Plate Setup

[menu __main __flexplate __setup __init]
type: command
name:  Init Plate Array 
enable: {'plate_array' not in printer.save_variables.variables}
gcode:
  INIT_PLATE_ARRAY

[menu __main __flexplate __setup __add]
type: command
name:  Add new Plate 
enable: {'plate_array' in printer.save_variables.variables}
gcode:
  ADD_NEW_PLATE
  
[menu __main __flexplate __setup __remove]
type: command
name:  Remove active Plate 
enable: {'plate_array' in printer.save_variables.variables}
gcode:
  REMOVE_PLATE

[menu __main __flexplate __setup __offset]
type: input
name:  Offset:{'%01.3f' % menu.input}
enable: {'plate_array' in printer.save_variables.variables and printer['gcode_macro _USER_VARIABLE'].auto_z_offset|lower == 'flexplate' }
input: {printer.save_variables.variables.plate_array[printer.save_variables.variables.plate_index|int][1]}
input_min: -1.0
input_max: 1.0
input_step: 0.001
gcode:
  {%- if menu.event == 'long_click' -%}
    CHANGE_PLATE_OFFSET OFFSET={'%01.3f' % menu.input|float}
  {%- endif -%}

## no idea how to implement that at the moment
#[menu __main __flexplate __setup __name]
#type: input
#name:  Name:{'%s' % menu.input}
#enable: {'plate_array' in printer.save_variables.variables}
#input: {printer.save_variables.variables.plate_array[printer.save_variables.variables.plate_index|int][0]}
#gcode:
#  {%- if menu.event == 'long_click' -%}
#    _CHANGE_PLATE_NAME NAME={'%f' % menu.input|float}
#  {%- endif -%}

[gcode_macro SHEET_1]
gcode:
	SET_PLATE INDEX=0
	
[gcode_macro SHEET_2]
gcode:
	SET_PLATE INDEX=1

[gcode_macro SHEET_3]
gcode:
	SET_PLATE INDEX=2
	
[gcode_macro SHEET_4]
gcode:
	SET_PLATE INDEX=3

[gcode_macro SHEET_5]
gcode:
	SET_PLATE INDEX=4

[gcode_macro SHEET_6]
gcode:
	SET_PLATE INDEX=5
